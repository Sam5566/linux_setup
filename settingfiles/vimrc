" .vimrc
" Fisa-vim-config
" http://fisadev.github.io/fisa-vim-config/
" Modified version: 8.2  by Sheng-Jun Lin, Kuan-Hsien Wu

" ============================================================================
" Vim-plug initialization
" Avoid modify this section, unless you are very sure of what you are doing

let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

" Obscure hacks done, you can now modify the rest of the .vimrc as you wish :)

" ============================================================================
" Active plugins
" You can disable or add new ones here:

" this needs to be here, so vim-plug knows we are declaring the plugins we
" want to use
call plug#begin('~/.vim/plugged')

" Plugins from github repos:
"*************************************************

" vim-powerline
Plug 'powerline/powerline'
" Code commenter
Plug 'scrooloose/nerdcommenter'
" Ctags
Plug 'universal-ctags/ctags'
" Cscope // record function appearance
"Plug 'chazy/cscope_maps'
" Class/module browser
Plug 'majutsushi/tagbar'
" Show the func. def.
"Plug 'wesleyche/SrcExpl'
" Better file browser
Plug 'scrooloose/nerdtree'
" Paint css colors with the real color
Plug 'lilydjwg/colorizer'
" Rainbow parentheses
"Plug 'luochen1990/rainbow'
Plug 'kien/rainbow_parentheses.vim'
" Commentary
Plug 'tpope/vim-commentary'
" Bracket Surround
Plug 'tpope/vim-surround'
" Indent Line
Plug 'Yggdroot/indentLine'
" Syntax check
Plug 'scrooloose/syntastic'
" Tabs
Plug 'kien/tabman.vim'
" Auto completion
Plug 'ycm-core/YouCompleteMe'
" COC completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Complete parameters
Plug 'tenfyzhong/CompleteParameter.vim'
" Auto pairs
Plug 'jiangmiao/auto-pairs'
" Air-line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Fswitch between .h & .cpp
Plug 'derekwyatt/vim-fswitch'
" Fswitch to generate func. that def. in .h
Plug 'derekwyatt/vim-protodef'
" python completion
"Plug 'davidhalter/jedi-vim' "(replace by COC, coc-python, pylint)
" tabnine (use machine learning to do the source code completion)
Plug 'zxqfl/tabnine-vim'
"Plugins from github/vim-scripts repos:
"*************************************************

" Search results counter
Plug 'vim-scripts/IndexedSearch'

"*************************************************

" Tell vim-plug we finished declaring plugins, so it can load them
call plug#end()

" ============================================================================
" Install plugins the first time vim runs

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif

" ============================================================================
" Plugins settings and mappings
" Edit them as you wish.

" vim-powerline-------------------------
set laststatus=2 " Always display the statusline in all windows
set showtabline=1 " Always display the tabline, even if there is only one tab

" Tagbar -------------------------------
" autofocus on tagbar open
let g:tagbar_autofocus = 1
" toggle tagbar display
map <F4> :TagbarToggle<CR>

" NERDTree -----------------------------
" auto turn on NERDTree
" autocmd vimenter * NERDTree
" toggle nerdtree display
map <F3> :NERDTreeToggle<CR>
" open nerdtree with the current file selected
nmap ,t :NERDTreeFind<CR>
" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']
let NERDTreeWinPos=1

" Rainbow parentheses ------------------
" don;t enable when start up
autocmd VimEnter * RainbowParenthesesToggle

" Indent Line --------------------------
let g:indentLine_enabled = 0
let g:indentLine_char='¦'

" Commentary ---------------------------
autocmd FileType python,shell set commentstring=#\ %s
autocmd FileType mako set cms=##\ %s

" Syntastic ----------------------------
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"

augroup mySyntastic
    au!
    au FileType tex let b:syntastic_mode = "passive"
augroup END

" Jedi-vim -----------------------------
"let g:jedi#completions_enabled=0
"let g:jedi#completions_command='<c-n>'
"let g:jedi#use_tabs_not_buffers=1

" End of fisa-vim-config
" ============================================================================
"

"VIM Setting -----------------------------
"
syntax enable
set nu
set ruler
set confirm
set incsearch
set cursorline
set cursorcolumn
set nocompatible
set is
set hlsearch
set mouse=nic
set noshowmode
set hidden
" Vim Background - Gruvbox theme ----------
" Colorcheme gruvbox: https://github.com/morhetz/gruvbox
"
set t_Co=256
let g:gruvbox_contrast_dark='hard'
"colorscheme gruvbox
set bg=dark
" hi command must be entered after colorscheme
hi LineNr cterm=bold ctermfg=grey ctermbg=None
hi CursorLineNr cterm=bold ctermfg=Red ctermbg=NONE
hi Normal guibg=White ctermbg=None
hi CursorLine cterm=None ctermbg=Black
hi CursorColumn ctermbg=Black
" SrcExpl Setting -------------------------
nmap <F7> :SrcExplToggle<CR>
let g:SrcExpl_winHeight=8
let g:SrcExpl_pluginList=[
    \ "__Tag_List__",
    \ "_NERD_tree_",
    \ "Source_Explorer"
    \   ]
" Fold Setting ---------------------------

set foldenable
set foldmethod=syntax
hi Folded guibg=black guifg=white ctermfg=black ctermbg=darkgrey
hi FoldColumn guibg=red guifg=white ctermfg=black ctermbg=green

" Tab Setting -----------------------------

set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
retab

filetype plugin indent on

" Font Setting ---------------------------

syntax on
hi Comment ctermfg=Green

" when scrolling, keep cursor 2 lines away from screen border
set scrolloff=100
" More natural split opening
set splitbelow
set splitright

" IndentLine Setting ----------------------
let g:indentLine_enabled = 1

" FSwitch
nmap <silent> <Leader>sw :FSHere<cr>
let g:protodefprotogetter='~/.vim/plugged/vim-protodef/pullproto.pl'
let g:disable_protodef_sorting=1
"nmap <buffer> <silent> <leader> ;PP
"nmap <buffer> <silent> <leader> ;PN

" Taglist Setting -------------------------
let Tlist_Exit_OnlyWindow=1
let Tlist_Show_One_File=1
set ut=100

" Function - Suggestion in VIM ------------

set completeopt+=longest,menu,preview
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" Function - Autoremove white space in end of line
" - Remove trailing whitespace when writing a buffer, but not for diff files.
" - From Vigil <vim5632@rainslide.net>
function RemoveTrailingWhitespace()
    if &ft != "diff"
        let b:curcol = col(".")
        let b:curline = line(".")
        silent! %s/\s\+$//
        silent! %s/\(\s*\n\)\+\%$//

        call cursor(b:curline, b:curcol)
    endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()

" VIM Mapping ----------------------------------

" keymap in normal mode pre-set
nnoremap <F1> :tabprevious<CR>:echo "PREVIOUS TAB"<CR>
nnoremap <F2> :tabnext<CR>:echo "NEXT TAB"<CR>
nnoremap <F5> :set number!<CR>:echo "Toggle Line Number"<CR>
nnoremap <F6> :!ctags -R<CR>
"nnoremap <F7> :set foldcolumn=6<CR>:echo "Foldcolumn ON"<CR>
nnoremap <F8> :TlistToggle<CR>
nnoremap <tab><tab> :TMToggle<CR>:echo "TMToggle"<CR>
nnoremap <space> za
nnoremap <C-F> :mkview<CR>:echo "Setting Saved ..."<CR>
nnoremap <C-L> :loadview<CR>:echo "Setting Loaded ..."<CR>
nnoremap <C-F11> :hi Comment ctermbg=Black<CR>:echo "Hi-Comment ON"<CR>
nnoremap <C-F12>> :hi Comment ctermbg=White<CR>:echo "Hi-Comment OFF"<CR>
fun! GoYCM()
    nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
    nnoremap <leader>gr :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
endfun

" suggested input keymap from present unfinished words
inoremap `` <c-p>
" suggested input keymap from previous finished words
inoremap `1 <c-n>
" keymap in insert mode pre-set
inoremap <F1> <Esc>:tabprevious<CR>:echo "PREVIOUS TAB"<CR>i
inoremap <F2> <Esc>:tabnext<CR>:echo "NEXT TAB"<CR>i
inoremap <F5> <Esc>:set number!<CR>:echo "Toggle Line Number"<CR>i
inoremap <F6> <Esc>:set relativenumber!<CR>:echo "Toggle Rel Line Number"<CR>i
inoremap <silent> <F8> :TlistToggle<CR>
"inoremap {{ {}<esc>i
"inoremap {<cr> {<cr>}<esc>i
"inoremap << <><esc>i
"inoremap <> </><esc>i
"inoremap '' ''<esc>i
"inoremap "" ""<esc>i
"inoremap ''' '''<cr>'''<esc>i<esc>i<esc>i
"inoremap """ """<cr>"""<esc>i<esc>i<esc>i

" mapping -------------------------------------------------|
" execute scripts in vim -------------
"filetype plugin on


"YouCompleteMe
let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0
set completeopt=menu,menuone
let g:ycm_cache_omifunc=0
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings=1
let g:ycm_collect_identifiers_from_comments_and_strings=0

let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_add_preview_to_completeopt=0
let g:ycm_server_log_level='info'
let g:ycm_auto_trigger=0
let g:ycm_key_invoke_completion = '<c-n>'

let g:ycm_min_num_identifier_candidate_chars=2
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_collect_identifiers_from_tag_files=1
let g:ycm_show_diagnostics_ui=0
let g:ycm_semantic_triggers =  {
\   'c,cpp,cxx,python,java,go,erlang,perl':['re!\w{2}'],
\   'cs,lua,javascript':['re!\w{2}'],
\}
let g:ycm_filetype_whitelist = {
			\ "c":1,
            \ "cxx":1,
			\ "cpp":1,
			\ "objc":1,
            \ "py":1,
			\ "sh":1,
			\ "zsh":1,
			\ "zimbu":1,
			\ }
hi PMenu ctermfg=green ctermbg=Black guifg=white guibg=green
hi PMenuSel ctermfg=white ctermbg=Black guifg=white guibg=green

" coc config
inoremap <silent><expr> <c-z> coc#refresh()
let g:coc_global_extensions = [
    \ 'coc-snippets',
    \ 'coc-pairs',
    \ 'coc-eslint',
    \ 'coc-json',
    \ 'coc-lists',
    \ 'coc-python'
  \ ]



" when create a new script, note the copyright
autocmd BufNewFile *cxx,*.cpp,*.c exec ":call SetTitle()"
    func SetTitle()
        call setline(1,"/**")
        call append(line("."), " *   Copyright (C) ".strftime("%Y")." All rights reserved.")
        call append(line(".")+1, " *")
        call append(line(".")+2, " *   FileName      ：".expand("%:t"))
        call append(line(".")+3, " *   Author        ：Cheng-Tse Sam Huang")
        call append(line(".")+4, " *   Email         ：samhuang87@gmail.com")
        call append(line(".")+5, " *   Date          ：".strftime("%m/%d/%Y"))
        call append(line(".")+6, " *   Description   ：")
        call append(line(".")+7, " */")
    endfunc
" automatically move highlight to the end of the line"
autocmd BufNewFile * normal G

"autocmd FileType cpp,hpp,h,c :call coc#config("suggest.autoTrigger", "none")
"autocmd FileType vim,python,tex :call coc#config("suggest.autoTrigger", "always")
